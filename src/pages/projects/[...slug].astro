---
import type { GetStaticPathsOptions } from 'astro'
import { Picture } from 'astro:assets'
import { getCollection } from 'astro:content'
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'

import TextSection from '../../components/blog/TextSection'
import { Spacer } from '../../components/layout/Spacer'
import GrantCard from '../../components/project/GrantCard.astro'
import { Button } from '../../components/ui/button'
import { Card } from '../../components/ui/card'
import { Separator } from '../../components/ui/separator'
import BaseLayout from '../../layouts/BaseLayout.astro'
import { ArrowUpRight, ArrowUpRightSquare } from 'lucide-react'
import { ArrowTopRightIcon, ExternalLinkIcon } from '@radix-ui/react-icons'
import Link from '../../components/project/Link.astro'

dayjs.extend(utc)

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const blogEntries = await getCollection('projects')
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }))
}

const { entry } = Astro.props
const { Content, remarkPluginFrontmatter } = await entry.render()
const lastModified = dayjs(remarkPluginFrontmatter.lastModified).utc().format('YYYY.MM.DD')
---

<BaseLayout isProject posts={entry}>
  {
    entry.data.hoverVideo && (
      <video
        src={entry.data.hoverVideo}
        autoplay
        muted
        transition:persist
        transition:name={entry.data.hoverVideo}
      />
    )
  }
  {
    entry.data.hoverImage && (
      <div class='flex justify-center align-center text-center'>
        <Picture
          widths={[360, 768, 1024, 1440]}
          class={'h-[900px] object-cover '}
          formats={['avif', 'webp']}
          src={entry.data.hoverImage}
          transition:animate='fade'
          alt=''
          transition:name={entry.data.hoverImage.src}
          sizes={'(min-width: 360px) (min-width: 768px) (min-width:1024px)  (min-width:1440px)'}
          pictureAttributes={{
            style: 'display: flex; justify-content: center; align-items: center;',
          }}
        />
      </div>
    )
  }

  <Spacer size={32} />

  <div class='flex flex-col gap-4 max-w-5xl mx-auto'>
    <div class='flex items-center justify-between'>
      <p class='text-slate-500'>Project name</p>
      <p class='text-2xl text-left max-w-xs w-full'>
        {entry.data.title}
      </p>
    </div>

    <div class='flex  justify-between'>
      <p class='text-slate-500'>Description</p>
      <p class='text-md text-left max-w-xs w-full'>
        {entry.data.subtitle}
      </p>
    </div>

    <div class='flex items-center justify-between'>
      <p class='text-slate-500 '>Role</p>
      <p class='text-md text-left max-w-xs w-full'>
        {entry.data.role}
      </p>
    </div>

    <div class='flex items-center justify-between'>
      <p class='text-slate-500'>Updated Date</p>
      <p class='text-md text-left max-w-xs w-full'>
        {lastModified}
      </p>
    </div>

    <div class='flex items-center justify-between'>
      <p class='text-slate-500'>Project Types</p>
      <div class='flex flex-wrap gap-3 text-md text-left max-w-xs w-full'>
         
        {
          entry.data.tags.map((tag: string) => {
            const formattedTag = tag.charAt(0).toUpperCase() + tag.slice(1)
            return (
              <Button variant={'secondary'}>
                <a href={'/types/' + tag}>{formattedTag}</a>
              </Button>
            )
          })
        }
      </div>
    </div>
  </div>
  <Spacer size={64} />

  <Content />
  <Spacer size={64} />
  <div class='bg-[#F8F8F8]'>
    <div>
      <Spacer size={32} />
      {
        entry.data.credits.length > 0 && (
          <div class='mx-6 md:mx-28'>
            <h4 class='mb-4 text-3xl font-medium leading-none text-left'>Credits</h4>
            <div class='flex flex-col gap-4 text-left flex-wrap'>
              {entry.data.credits.map((credit) => {
                return <p class='text-sm'>{credit}</p>
              })}
            </div>
            <Spacer size={32} />
            <Separator />
          </div>
        )
      }

      {
        entry.data.thanks.length > 0 && (
          <div class='mx-6 md:mx-28'>
            <Spacer size={32} />
            <Card className='px-8 py-4 w-full'>
              <h4 class='mb-4 text-3xl font-medium leading-none text-left'>Thanks</h4>
              <div class='flex flex-col gap-4 text-left md:text-left flex-wrap'>
                {entry.data.thanks.map((credit) => {
                  return <p class='text-sm'>{credit}</p>
                })}
              </div>
            </Card>
          </div>
        )
      }

      {
        entry.data.media.length > 0 && (
          <div class='mx-6 md:mx-28'>
            <Spacer size={32} />
            <h4 class='mb-4 text-3xl font-medium leading-none text-left'>Media</h4>
            <div class='flex flex-col gap-4 text-left flex-wrap'>
              {entry.data.media.map((media) => {
                return <Link reference={media.reference} title={media.title} />
              })}
            </div>
            <Spacer size={32} />
            <Separator />
          </div>
        )
      }
      {
        entry.data.exhibitions.length > 0 && (
          <div class='mx-6 md:mx-28'>
            <Spacer size={32} />

            <h4 class='mb-4 text-3xl font-medium leading-none text-left '>Exhibitions</h4>
            <div class='flex flex-col gap-4 text-left md:text-left flex-wrap'>
              {entry.data.exhibitions.map((exhibition) => {
                return (
                  <p class='text-sm'>
                    {exhibition.exhibition_name} / {exhibition.city} / {exhibition.place}{' '}
                  </p>
                )
              })}
            </div>
          </div>
        )
      }
    </div>
    <Spacer size={64} />
  </div> 
</BaseLayout>

<Spacer size={32} />
