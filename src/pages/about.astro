---
import { getCollection } from 'astro:content'

import AboutAccordion from '../components/AboutAccordion/AboutAccordion'

import { Spacer } from '../components/layout/Spacer'
import SocialButtonRow from '../components/SocialButtonRow'
import { Separator } from '../components/ui/separator'
import { Content as AboutContent } from '../content/about/about.mdx'
import type {
  PublicationTableRow,
  MediaTableRow,
  ExhibitionTableRow,
  AwardTableRow,
  TalkTableRow,
  GrantTableRow,
} from '../components/AboutAccordion/TableData'
import BaseLayout from '../layouts/BaseLayout.astro'

const allPosts = await getCollection('projects')
---

<BaseLayout>
  <div class='flex mt-8 pb-8 md:flex-row flex-col gap-4 w-full'>
    <img
      class='h-[500px] transition-all hover:scale-105 flex-1 w-auto object-cover md:object-contain'
      src='https://images.unsplash.com/photo-1698948233567-341329ce43a9?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwyMHx8fGVufDB8fHx8fA%3D%3D'
    />
    <div class='flex flex-col gap-2 min-w-0 flex-1'>
      <AboutContent />
      <Spacer size={10} />
      <SocialButtonRow client:only='react' />
    </div>
  </div>
  <!-- <PhotoAccordion client:only='react' /> -->

  <Separator />
  <AboutAccordion
    client:only='react'
    PublicationData={[
      ...allPosts
        .flatMap((post) =>
          (post.data.publications as PublicationTableRow[]).map((publication) => ({
            ...publication,
            work: post.data.title,
          })),
        )
        .sort((a, b) => b.year - a.year),
    ]}
    MediaData={[
      ...allPosts
        .flatMap((post) =>
          (post.data.media as MediaTableRow[]).map((media) => ({
            ...media,
            work: post.data.title,
          })),
        )
        .sort((a, b) => b.year - a.year),
    ]}
    ExhibitionData={allPosts
      .flatMap((post) =>
        (post.data.exhibitions as ExhibitionTableRow[]).map((exhibition) => ({
          ...exhibition,
          work: post.data.title,
        })),
      )
      .sort((a, b) => {
        const startDateA = new Date(a.date.split(' - ')[0])
        const startDateB = new Date(b.date.split(' - ')[0])
        return startDateB.getTime() - startDateA.getTime()
      })}
    AwardData={allPosts
      .flatMap((post) =>
        (post.data.awards as AwardTableRow[]).map((award) => ({
          ...award,
          work: post.data.title,
        })),
      )
      .sort((a, b) => b.year - a.year)}
    TalkData={allPosts
      .flatMap((post) =>
        (post.data.talks as TalkTableRow[]).map((talk) => ({
          ...talk,
          work: post.data.title,
        })),
      )
      .sort((a, b) => b.year - a.year)}
    TeachingData={[
      {
        workshop_name: 'TA for Data Driven Art Summer School with Yasuaki Kakehi, Daito Manabe',
        place: 'Keio University SFC',
        date: '2018',
      },
      {
        workshop_name: 'TA for Data Driven Art Summer School with Yasuaki Kakehi, Daito Manabe',
        place: 'Keio University SFC',
        date: '2017',
      },
      {
        workshop_name: 'TA for Moving Picture with Saito Tatsuya',
        place: 'Keio University SFC',
        date: '2018',
      },
    ]}
    GrantData={allPosts
      .flatMap((post) =>
        (post.data.grants as GrantTableRow[]).map((grant) => ({
          ...grant,
          work: post.data.title,
        })),
      )
      .sort((a, b) => b.year - a.year)}
  />
</BaseLayout>
